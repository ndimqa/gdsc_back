package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"
	"log"
	"strings"

	"gdsc.back/google_services"
	"gdsc.back/graph/common"
	"gdsc.back/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	log.Println("Creating Post Request")
	context_ := common.GetContext(ctx)
	var category *model.Categories
	var categories []*model.Categories
	for i := 0; i <= len(input.Categories); i++ {
		err := context_.Database.Where("id = ?", input.Categories[i]).Find(&category).Error
		if err != nil {
			log.Println("Error occured: ", err)
		} else {
			categories = append(categories, category)
		}
	}
	post := &model.Post{
		Text:       input.Text,
		Image:      input.Image,
		Header:     input.Header,
		Categories: categories,
	}
	err := context_.Database.Create(&post).Error
	log.Println("Post created! ID: ", post.ID)
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	log.Println("Creating Comment Request")
	context_ := common.GetContext(ctx)
	var medicine *model.Medicine
	context_.Database.First(&medicine, "_id=?", input.MedicineID)
	comment := &model.Comment{
		Text:       input.Text,
		MedicineID: input.MedicineID,
	}
	medicine.Comments = append(medicine.Comments, comment)
	context_.Database.Save(&medicine)
	err := context_.Database.Create(&comment).Error
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	log.Println("Comment created! ID: ", comment.ID, " For Medicine ID: ", medicine.ID)
	return comment, nil
}

// CreateMedicine is the resolver for the createMedicine field.
func (r *mutationResolver) CreateMedicine(ctx context.Context, input model.NewMedicine) (*model.Medicine, error) {
	log.Println("Creating Medicine Request")
	context_ := common.GetContext(ctx)
	medicine := &model.Medicine{
		Name:        input.Name,
		Description: input.Description,
		RusName:     input.RusName,
		Comments:    nil,
	}
	err := context_.Database.Create(&medicine).Error
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	log.Println("Medicine created! ID: ", medicine.ID)
	return medicine, nil
}

// CreateAppointment is the resolver for the createAppointment field.
func (r *mutationResolver) CreateAppointment(ctx context.Context, input model.NewAppointment) (*model.Appointment, error) {
	var doctor *model.Doctor
	context_ := common.GetContext(ctx)
	err := context_.Database.Where("mail = ?", input.DoctorsMail).Find(&doctor).Error
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	appointment := &model.Appointment{
		UserMail:     input.UserMail,
		DoctorsMail:  input.DoctorsMail,
		DayMonthYear: input.DayMonthYear,
		Time:         input.Time,
		DoctorID:     doctor.ID,
		EndTime:      input.EndTime,
	}
	err1 := context_.Database.Create(&appointment).Error
	log.Println("Appointment created! ID: ", appointment.ID)
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err1
	}
	q := google_services.CreateAppointment(appointment)
	println(q)
	return appointment, nil
}

// CreateMetric is the resolver for the createMetric field.
func (r *mutationResolver) CreateMetric(ctx context.Context, input model.NewMetric) (*model.Metric, error) {
	panic(fmt.Errorf("not implemented: CreateMetric - createMetric"))
}

// CreatePostComment is the resolver for the createPostComment field.
func (r *mutationResolver) CreatePostComment(ctx context.Context, input model.NewPostComment) (*model.PostComment, error) {
	panic(fmt.Errorf("not implemented: CreatePostComment - createPostComment"))
}

// Posts is the resolver for the Posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	log.Println("Get Posts Request")
	context_ := common.GetContext(ctx)
	var posts []*model.Post
	var categories []*model.Categories
	err := context_.Database.Find(&posts).Error
	log.Println("Get Posts Request")
	for i := 0; i < len(posts); i++ {
		context_.Database.Raw("SELECT * from categories join post_categories pc on categories.id = pc.categories_id where post_id = ?", posts[i].ID).Scan(&categories)
		posts[i].Categories = categories
	}
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	return posts, nil
}

// Medicines is the resolver for the Medicines field.
func (r *queryResolver) Medicines(ctx context.Context) ([]*model.Medicine, error) {
	log.Println("Get Medicines Request")
	context_ := common.GetContext(ctx)
	var medicines []*model.Medicine
	err := context_.Database.Find(&medicines).Error
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	return medicines, nil
}

// Doctors is the resolver for the Doctors field.
func (r *queryResolver) Doctors(ctx context.Context) ([]*model.Doctor, error) {
	log.Println("Get Doctors Request")
	context_ := common.GetContext(ctx)
	var doctors []*model.Doctor
	err := context_.Database.Find(&doctors).Error
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	return doctors, nil
}

// Medicine is the resolver for the medicine field.
func (r *queryResolver) Medicine(ctx context.Context, id int) (*model.Medicine, error) {
	log.Println("Get Medicine Request! ID: ", id)
	context_ := common.GetContext(ctx)
	var medicine *model.Medicine
	err := context_.Database.Where("id = ?", id).Find(&medicine).Error
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	return medicine, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int) (*model.Post, error) {
	log.Println("Get Post Request! ID: ", id)
	context_ := common.GetContext(ctx)
	var post *model.Post
	err := context_.Database.Where("id = ?", id).Find(&post).Error
	if err != nil {
		log.Println("Error occured: ", err)
		return nil, err
	}
	return post, nil
}

// FilterPostsCategory is the resolver for the filter_posts_category field.
func (r *queryResolver) FilterPostsCategory(ctx context.Context, category []*int) ([]*model.Post, error) {
	log.Println("Filter Posts for category id: ", category)
	context_ := common.GetContext(ctx)
	var pre_result []*model.Post
	var result []*model.Post
	for i := 0; i > len(category); i++ {
		context_.Database.Raw(
			"SELECT image, header, c.name, time_to_read FROM posts JOIN post_categories pc on posts.id = pc.post_id JOIN categories c on c.id = pc.categories_id WHERE categories_id = ?;", category[i]).Scan(&pre_result)
		result = append(result, pre_result...)
	}
	return result, nil
}

// FilterMedicineEng is the resolver for the filter_medicine_eng field.
func (r *queryResolver) FilterMedicineEng(ctx context.Context, name string) ([]*model.Medicine, error) {
	log.Println("Filter in Eng Post Request! substring: ", name)
	context_ := common.GetContext(ctx)
	var medicines []*model.Medicine
	search := name + "%"
	context_.Database.Where("name ilike ?", search).First(&medicines)
	return medicines, nil
}

// FilterMedicineRus is the resolver for the filter_medicine_rus field.
func (r *queryResolver) FilterMedicineRus(ctx context.Context, name string) ([]*model.Medicine, error) {
	log.Println("Filter in Rus Post Request! substring: ", name)
	context_ := common.GetContext(ctx)
	var medicines []*model.Medicine
	name = strings.Title(name)
	search := name + "%"
	context_.Database.Where("rus_name ilike ?", search).First(&medicines)
	return medicines, nil
}

// CreateDoc is the resolver for the create_doc field.
func (r *queryResolver) CreateDoc(ctx context.Context, mail string) (string, error) {
	res := google_services.CreateSpreadSheet(mail)
	return res, nil
}

// FindReservedTimeSlots is the resolver for the find_reserved_time_slots field.
func (r *queryResolver) FindReservedTimeSlots(ctx context.Context, doctorsMail string, dayMonthYear string) ([]*model.Appointment, error) {
	log.Println("Finding Reserved times Request")
	context_ := common.GetContext(ctx)
	var appointment []*model.Appointment
	var doctor *model.Doctor
	context_.Database.Where("mail = ?", doctorsMail).First(&doctor)
	context_.Database.Where("day_month_year = ? AND doctor_id = ?", dayMonthYear, doctor.ID).Find(&appointment)
	return appointment, nil
}

// SetMetric is the resolver for the set_metric field.
func (r *queryResolver) SetMetric(ctx context.Context, metric model.NewMetric, docName string) (bool, error) {
	res := google_services.SetMetricToSpreadSheet(docName, &metric)
	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
